<?php
require_once __DIR__ . '/lib/utilities/RadioEnums.inc';
require_once __DIR__ . '/lib/utilities/Helpers.inc';


function printif($array, $key) {
  if (isset($array[$key])) {
    print $array[$key];
  }
}


/**
 * Implements hook_init().
 */
function radio_station_init() {
  require_once __DIR__ . '/lib/utilities/RadioAssets.inc';
  $assets = new RadioAssets();
  $assets->add();
}


/**
 * Implements hook_menu().
 */
function radio_station_menu() {
  $router = new RadioRoutes();
  return $router->get();
}


/**
 * Implements hook_cron().
 */
function radio_station_cron() {
  $component = new StationContentComponent();
  $episodes = $component->getRippingEpisodes(EStreams::One, 5);
  $component->scheduleRippingEpisodes($episodes);
  $component->attachNewRips();
}


/**
 * Implements hook_theme().
 */
function radio_station_theme() {
  $templates = new RadioTemplates();
  return $templates->get();
}


/**
 * Implements hook_block_info().
 */
function radio_station_block_info() {
  $blocks = new RadioBlocks();
  return $blocks->get();
}


/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return array
 */
function radio_station_block_view($delta = '') {
  $blocks = new RadioBlocks();
  return $blocks->view($delta);
}


/**
 * Implements hook_query_alter().
 *
 * @param \QueryAlterableInterface $query
 */
function radio_station_query_alter(QueryAlterableInterface $query) {
  if (!isset($query->alterTags)) {
    return;
  }

  $tags = $query->alterTags;

  foreach ($tags as $tag => $value) {
    if (Helpers::startsWith($tag, 'radio_')) {
      $callback = explode('_', $tag);
      array_shift($callback);
      $callback = implode('::', $callback);
      call_user_func($callback, $query);
    }
  }
}


function radio_station_user_has_role(array $roles) {
  return RadioRoles::hasAny($roles, true);
}


function radio_station_streams_form($form, &$form_state) {
  return RadioForms::getStreams($form);
}


function radio_station_get_episode($stream, $direction, $timestamp) {
  $response = new ApiResponse();
  $response->getEpisode($stream, $direction, $timestamp);
}


function radio_station_get_day($stream, $direction, $timestamp) {
  $response = new ApiResponse();
  $response->getDay($stream, $direction, $timestamp);
}


function radio_station_get_week($stream, $direction, $timestamp) {
  $response = new ApiResponse();
  $response->getWeek($stream, $direction, $timestamp);
}


function radio_station_get_playlists() {
  $data = RadioSpinitron::getLatestPlaylists(10, true);
  drupal_json_output($data);
}


function radio_station_get_schedule() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new ScheduleResponse();
  return $response->getCalendar();
}


function radio_station_get_community_events() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new EventsResponse();
  return $response->getUpcomingCommunity();
}


function radio_station_get_news() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new NewsResponse();
  return $response->get();
}


function radio_station_get_listen_now() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new PlayerResponse();
  return $response->get();
}


function radio_station_get_audio() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new StationContentResponse();
  return $response->getAudio();
}


function radio_station_get_audio_feed() {
  if (arg(2)) {
    return MENU_NOT_FOUND;
  }

  $response = new StationContentResponse();
  $response->getAudioFeed();
}


function radio_station_get_underwriters() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new OrganizationResponse();
  return $response->getSponsors();
}


function radio_station_get_blog() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new BlogResponse();
  return $response->get();
}


function radio_station_get_home() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new HomeResponse();
  return $response->get();
}


function radio_station_get_program() {
  if (arg(1)) {
    return MENU_NOT_FOUND;
  }

  $response = new ProgramsResponse();
  return $response->getShows();
}


function radio_station_get_program_genre() {
  if (arg(2)) {
    return MENU_NOT_FOUND;
  }

  $response = new ProgramsResponse();
  return $response->getGenres();
}


function radio_station_get_program_topic() {
  if (arg(2)) {
    return MENU_NOT_FOUND;
  }

  $response = new ProgramsResponse();
  return $response->getTopics();
}


function radio_station_get_program_content($program_alias) {
  if (arg(3)) {
    return MENU_NOT_FOUND;
  }

  $response = new ProgramsResponse();
  return $response->getContent($program_alias);
}


function radio_station_get_program_content_title($program_alias) {
  $title = ProgramsResponse::getTitle($program_alias);
  return "Latest Content for {$title}";
}


function radio_station_preprocess_radio_template_program_content_list(&$vars) {
  $node = menu_get_object();
  $component = new StationContentComponent();
  $pager = $component->getContentForProgram($node->nid, 1, 3);
  $vars['pager'] = $pager;

  $vars['program'] = [
    'title' => $node->title,
  ];

  if (count($pager['items']) > 0) {
    $program_url = TemplateProcessor::getEntityUrl($node);
    $vars['content_url'] = "$program_url/content";
  }
}


function radio_station_get_program_playlists() {
  if (arg(2)) {
    return MENU_NOT_FOUND;
  }

  $response = new ProgramsPlaylistResponse();
  return $response->get();
}


function radio_station_preprocess_radio_template_audio_player(&$vars) {
  $node = menu_get_object();
  $entity = entity_metadata_wrapper('node', $node);

  try {
    $audio_files = $entity->field_audio_files->value();
  } catch (EntityMetadataWrapperException $e) {
    $audio_files = [];
  }

  try {
    $record = $entity->field_episode_record->value();
  } catch (EntityMetadataWrapperException $e) {
    $record = EArchiveTypes::NEVER;
  }

  $allow_download = ($record == EArchiveTypes::PERMANENT);

  foreach ($audio_files as &$audio_file) {
    $audio_file['filepath'] = file_create_url($audio_file['uri']);
  }

  $vars['audio_files'] = $audio_files;
  $vars['allow_download'] = $allow_download;

  $assets = new RadioAssets();
  $assets->audioPlayer();
}


function radio_station_preprocess_radio_template_episode_playlists(&$vars) {
  $node = menu_get_object();
  $vars['playlists'] = RadioSpinitron::getEpisodePlaylist($node);
}


function radio_station_preprocess_node(&$vars) {
  NodeTeaserProcessor::preprocess($vars);
}
