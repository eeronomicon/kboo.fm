<?php
require_once __DIR__ . '/lib/utilities/RadioEnums.inc';
require_once __DIR__ . '/lib/utilities/Helpers.inc';


function printif($array, $key) {
  if (isset($array[$key])) {
    print $array[$key];
  }
}


/**
 * Implements hook_init().
 */
function radio_station_init() {
  require_once __DIR__ . '/lib/utilities/RadioAssets.inc';
  $assets = new RadioAssets();
  $assets->add();
}


/**
 * Implements hook_menu().
 */
function radio_station_menu() {
  $router = new RadioRoutes();
  return $router->get();
}


/**
 * Implements hook_theme().
 */
function radio_station_theme() {
  $templates = new RadioTemplates();
  return $templates->get();
}


/**
 * Implements hook_query_alter().
 *
 * @param \QueryAlterableInterface $query
 */
function radio_station_query_alter(QueryAlterableInterface $query) {
  if (!isset($query->alterTags)) {
    return;
  }

  $tags = $query->alterTags;

  foreach ($tags as $tag => $value) {
    if (Helpers::startsWith($tag, 'radio_')) {
      $callback = explode('_', $tag);
      array_shift($callback);
      $callback = implode('::', $callback);
      call_user_func($callback, $query);
    }
  }
}


function radio_station_user_has_role(array $roles) {
  global $user;

  if ($user->uid == 1) {
    return true;
  }

  $user_roles = array_values($user->roles);
  $check = array_intersect($roles, $user_roles);
  $has_role = !empty($check);
  return $has_role;
}


function radio_station_livewire_form($form, &$form_state) {
  return RadioForms::getConfigLivewire($form);
}


function radio_station_sample_groove_guardian($style) {
  $response = new ApiResponse();
  $response->getSampleAds($style);
}


function radio_station_player_carousel() {
  $response = new ApiResponse();
  $response->getPlayerCarousel();
}


function radio_station_promos($count) {
  $response = new ApiResponse();
  $response->getPromos($count);
}


function radio_station_acts() {
  $params = Helpers::getQueryParameters();
  $response = new ApiResponse();
  $response->getActs($params['term']);
}


function radio_station_venue() {
  $params = Helpers::getQueryParameters();
  $response = new ApiResponse();
  $response->getVenue($params['term']);
}


function radio_station_get_episode($stream, $direction, $timestamp) {
  $response = new ApiResponse();
  $response->getEpisode($stream, $direction, $timestamp);
}


function radio_station_get_day($stream, $direction, $timestamp) {
  $response = new ApiResponse();
  $response->getDay($stream, $direction, $timestamp);
}


function radio_station_get_week($stream, $direction, $timestamp) {
  $response = new ApiResponse();
  $response->getWeek($stream, $direction, $timestamp);
}


function radio_station_get_playlists() {
  $params = Helpers::getQueryParameters();
  $data = RadioSpinitron::getPlaylists($params);
  drupal_json_output($data);
}


function radio_station_get_schedule() {
  $response = new ScheduleResponse();
  return $response->getCalendar();
}


function radio_station_get_livewire_generator() {
  $response = new LivewireResponse();
  return $response->getGenerator();
}


function radio_station_get_livewire_calendar() {
  $response = new LivewireResponse();
  return $response->getCalendar();
}


function radio_station_get_community_events() {
  $response = new EventsResponse();
  return $response->getUpcomingCommunity();
}


function radio_station_get_live_events() {
  $response = new EventsResponse();
  return $response->getUpcomingLive();
}

function radio_station_get_events_quick_add() {
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $response = new EventsResponse();
    return $response->postQuickAdd();
  } else {
    $response = new EventsResponse();
    return $response->getQuickAdd();
  }
}


function radio_station_get_events_quick_view() {
  $response = new EventsResponse();
  return $response->getQuickView();
}


function radio_station_get_live_events_previous() {
  $response = new EventsResponse();
  return $response->getPreviousLive();
}


function radio_station_get_news() {
  $response = new NewsResponse();
  return $response->get();
}


function radio_station_get_about_contributors() {
  $response = new ProfilesResponse();
  return $response->getContributors();
}


function radio_station_get_blog() {
  $response = new BlogResponse();
  return $response->get();
}


function radio_station_get_venues() {
  $response = new VenuesResponse();
  return $response->get();
}


function radio_station_get_programs_content($program_alias) {
  $response = new ProgramsResponse();
  return $response->getContent($program_alias);
}


function radio_station_get_programs_content_title($program_alias) {
  $title = ProgramsResponse::getTitle($program_alias);
  return "Latest Content for {$title}";
}


function radio_station_get_programs_podcast($program_alias) {
  $response = new ProgramsResponse();
  return $response->getPodcast($program_alias);
}


function radio_station_get_programs_podcast_title($program_alias) {
  $title = ProgramsResponse::getTitle($program_alias);
  return "{$title} Podcast";
}


function radio_station_get_programs_show_hosts() {
  $response = new ProfilesResponse();
  return $response->getShowHosts();
}


function radio_station_get_programs_streams() {
  $response = new ProgramsResponse();
  return $response->getStreams();
}


function radio_station_get_programs_playlists() {
  $response = new ProgramsPlaylistResponse();
  return $response->get();
}


function radio_station_preprocess_radio_template_audio_player(&$vars) {
  $node = menu_get_object();
  $entity = entity_metadata_wrapper('node', $node);
  $audio_files = $entity->field_audio_files->value();
  foreach ($audio_files as &$audio_file) {
    $audio_file['filepath'] = file_create_url($audio_file['uri']);
  }
  $vars['audio_files'] = $audio_files;

  $assets = new RadioAssets();
  $assets->audioPlayer();
}


function radio_station_preprocess_radio_template_episode_playlists(&$vars) {
  $node = menu_get_object();
  $vars['playlists'] = RadioSpinitron::getEpisodePlaylist($node);
}


function radio_station_preprocess_node(&$vars) {
  NodeTeaserProcessor::preprocess($vars);
}

